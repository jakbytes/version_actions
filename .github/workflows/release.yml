name: Automatic Versioning and Release

on:
  push:
    branches:
      - main
      - staging
      - development
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21.6

      - name: Test
        run: |
          go test -v ./... -coverprofile=coverage.out

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  version:
    name: Version
    runs-on: ubuntu-latest
    needs: [ test ]
    outputs:
      type: ${{ steps.version.outputs.type }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.AUTOMATIONS_BOT_TOKEN }}

      - name: Configure Git for GitHub Actions
        run: |
          git config --global user.email "git.automations.bot@gmail.com"
          git config --global user.name "automations-bot"

      - name: Set Environment Variables
        run: |
          if [ "${{ github.ref_name }}" == "development" ]; then
            echo "PRERELEASE_TAG=drc" >> $GITHUB_ENV
          else
            echo "PRERELEASE_TAG=src" >> $GITHUB_ENV
          fi
      - name: Automated Release Pull Request
        uses: jakbytes/version_actions/action/version@internal
        id: version
        with:
          token: ${{ secrets.AUTOMATIONS_BOT_TOKEN }}
          prerelease: ${{ env.PRERELEASE_TAG }}
          base: ${{ github.ref_name }}
  release:
    name: Build and Release
    needs: [ version ]
    if: needs.version.outputs.type == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.AUTOMATIONS_BOT_TOKEN }}

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-notes

      - name: Configure Git for GitHub Actions
        run: |
          git config --global user.email "git.automations.bot@gmail.com"
          git config --global user.name "automations-bot"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21.6

      - name: Build
        run: |
          go build version_action.go
          chmod +x version_action

      - name: Tag Internal
        if: github.ref_name == 'staging'
        run: |
          # Check if the tag 'internal' already exists
          if git tag --list | grep -qx 'internal'; then
              echo "Tag 'internal' already exists. Moving the tag."
              git tag -d internal
              git push origin :refs/tags/internal
          fi
          
          # Create a new tag 'internal'
          git tag -a internal -m "Internal release"
          
          # Push the tag to remote
          git push origin internal --force 

      - name: Tag Version
        run: |          
          # Create tag from 'needs.version.outputs.version'
          git tag ${{ needs.version.outputs.version }}

          # Push the tag to remote
          git push origin --tags

      - name: Release Notes
        run: |
          cat release.txt

      - name: Release Version
        uses: softprops/action-gh-release@v0.1.15
        with:
          token: ${{ secrets.AUTOMATIONS_BOT_TOKEN }}
          tag_name: ${{ needs.version.outputs.version }}
          prerelease: ${{ github.ref_name != 'main' && 'true' || 'false' }}
          body_path: release.txt
          files: |
            action
            LICENSE

      - name: Release Internal
        if: github.ref_name == 'staging'
        uses: softprops/action-gh-release@v0.1.15
        with:
          token: ${{ secrets.AUTOMATIONS_BOT_TOKEN }}
          body_path: release.txt
          prerelease: true
          tag_name: internal
          files: |
            action
            LICENSE
  promote:
    name: Create Promote PR
    runs-on: ubuntu-latest
    needs: [ release ]
    if: github.ref_name != 'main'
    outputs:
      action: ${{ steps.version.outputs.type }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Set Environment Variables
        run: |
          echo "PRERELEASE_TAG=dev" >> $GITHUB_ENV
          if [ "${{ github.ref_name }}" == "development" ]; then
            echo "PRERELEASE_TAG=src" >> $GITHUB_ENV
            echo "BASE_BRANCH=staging" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "staging" ]; then
            echo "BASE_BRANCH=main" >> $GITHUB_ENV
          else
            echo "BASE_BRANCH=none" >> $GITHUB_ENV
          fi
      - name: Automated Release Pull Request
        uses: jakbytes/version_actions/action/version@internal
        id: version
        with:
          token: ${{ secrets.AUTOMATIONS_BOT_TOKEN }}
          prerelease: ${{ env.PRERELEASE_TAG }}
          base: ${{ env.BASE_BRANCH }}
          trigger: "promote"
  sync:
    name: Sync Releases
    runs-on: ubuntu-latest
    needs: [ release ]
    if: github.ref_name != 'development'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.AUTOMATIONS_BOT_TOKEN }}
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Configure Git for GitHub Actions
        run: |
          git config --global user.email "git.automations.bot@gmail.com"
          git config --global user.name "automations-bot"

      - name: Sync Development
        uses: jakbytes/version_actions/action/sync@internal
        with:
          token: ${{ secrets.AUTOMATIONS_BOT_TOKEN }}
          base: development

      - name: Sync Staging
        uses: jakbytes/version_actions/action/sync@internal
        if: github.ref_name == 'main'
        with:
          token: ${{ secrets.AUTOMATIONS_BOT_TOKEN }}
          base: staging
